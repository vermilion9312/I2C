
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002784  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000399c  08002890  08002890  00003890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800622c  0800622c  00008014  2**0
                  CONTENTS
  4 .ARM          00000000  0800622c  0800622c  00008014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800622c  0800622c  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800622c  0800622c  0000722c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006230  08006230  00007230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006234  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08006248  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08006248  00008490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d68  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b3  00000000  00000000  0000eda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005dc  00000000  00000000  00010c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd2  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a167  00000000  00000000  00027eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d93  00000000  00000000  00032015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e68  00000000  00000000  000b3dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000b5c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002878 	.word	0x08002878

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002878 	.word	0x08002878

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 feb1 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f91d 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f985 	bl	8000468 <MX_GPIO_Init>
  MX_I2C2_Init();
 800015e:	f000 f955 	bl	800040c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000162:	f000 fb1d 	bl	80007a0 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000166:	2100      	movs	r1, #0
 8000168:	2000      	movs	r0, #0
 800016a:	f000 fc81 	bl	8000a70 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	497a      	ldr	r1, [pc, #488]	@ (800035c <main+0x210>)
 8000172:	487b      	ldr	r0, [pc, #492]	@ (8000360 <main+0x214>)
 8000174:	f000 fd10 	bl	8000b98 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000178:	211e      	movs	r1, #30
 800017a:	200a      	movs	r0, #10
 800017c:	f000 fc78 	bl	8000a70 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	4976      	ldr	r1, [pc, #472]	@ (800035c <main+0x210>)
 8000184:	4877      	ldr	r0, [pc, #476]	@ (8000364 <main+0x218>)
 8000186:	f000 fd07 	bl	8000b98 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 800018a:	f000 fbcd 	bl	8000928 <SSD1306_UpdateScreen>

  HAL_Delay (2000);
 800018e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000192:	f000 fef3 	bl	8000f7c <HAL_Delay>


  SSD1306_ScrollRight(0,7);  // scroll entire screen
 8000196:	2107      	movs	r1, #7
 8000198:	2000      	movs	r0, #0
 800019a:	f000 f98d 	bl	80004b8 <SSD1306_ScrollRight>
  HAL_Delay(2000);  // 2 sec
 800019e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001a2:	f000 feeb 	bl	8000f7c <HAL_Delay>

  SSD1306_ScrollLeft(0,7);  // scroll entire screen
 80001a6:	2107      	movs	r1, #7
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 f9bb 	bl	8000524 <SSD1306_ScrollLeft>
  HAL_Delay(2000);  // 2 sec
 80001ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001b2:	f000 fee3 	bl	8000f7c <HAL_Delay>

  SSD1306_Stopscroll();
 80001b6:	f000 fa6b 	bl	8000690 <SSD1306_Stopscroll>
  SSD1306_Clear();
 80001ba:	f000 fd12 	bl	8000be2 <SSD1306_Clear>

  SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 80001be:	2301      	movs	r3, #1
 80001c0:	9301      	str	r3, [sp, #4]
 80001c2:	2340      	movs	r3, #64	@ 0x40
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	2380      	movs	r3, #128	@ 0x80
 80001c8:	4a67      	ldr	r2, [pc, #412]	@ (8000368 <main+0x21c>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 fa7e 	bl	80006ce <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 80001d2:	f000 fba9 	bl	8000928 <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 80001d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001da:	f000 fecf 	bl	8000f7c <HAL_Delay>

  SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 80001de:	210f      	movs	r1, #15
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 f969 	bl	80004b8 <SSD1306_ScrollRight>

  HAL_Delay (2000);
 80001e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001ea:	f000 fec7 	bl	8000f7c <HAL_Delay>

  SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 80001ee:	210f      	movs	r1, #15
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 f997 	bl	8000524 <SSD1306_ScrollLeft>

  HAL_Delay (2000);
 80001f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001fa:	f000 febf 	bl	8000f7c <HAL_Delay>

  SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 80001fe:	210f      	movs	r1, #15
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f9c5 	bl	8000590 <SSD1306_Scrolldiagright>

  HAL_Delay (2000);
 8000206:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800020a:	f000 feb7 	bl	8000f7c <HAL_Delay>

  SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 800020e:	210f      	movs	r1, #15
 8000210:	2000      	movs	r0, #0
 8000212:	f000 f9fd 	bl	8000610 <SSD1306_Scrolldiagleft>

  HAL_Delay (2000);
 8000216:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800021a:	f000 feaf 	bl	8000f7c <HAL_Delay>

  SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 800021e:	f000 fa37 	bl	8000690 <SSD1306_Stopscroll>


  SSD1306_InvertDisplay(1);   // invert the display
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fa3d 	bl	80006a2 <SSD1306_InvertDisplay>

  HAL_Delay(2000);
 8000228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800022c:	f000 fea6 	bl	8000f7c <HAL_Delay>

  SSD1306_InvertDisplay(0);  // normalize the display
 8000230:	2000      	movs	r0, #0
 8000232:	f000 fa36 	bl	80006a2 <SSD1306_InvertDisplay>
//

  HAL_Delay(2000);
 8000236:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800023a:	f000 fe9f 	bl	8000f7c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_Clear();
 800023e:	f000 fcd0 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 8000242:	2301      	movs	r3, #1
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2340      	movs	r3, #64	@ 0x40
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2380      	movs	r3, #128	@ 0x80
 800024c:	4a47      	ldr	r2, [pc, #284]	@ (800036c <main+0x220>)
 800024e:	2100      	movs	r1, #0
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fa3c 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000256:	f000 fb67 	bl	8000928 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800025a:	f000 fcc2 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 800025e:	2301      	movs	r3, #1
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	2340      	movs	r3, #64	@ 0x40
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2380      	movs	r3, #128	@ 0x80
 8000268:	4a41      	ldr	r2, [pc, #260]	@ (8000370 <main+0x224>)
 800026a:	2100      	movs	r1, #0
 800026c:	2000      	movs	r0, #0
 800026e:	f000 fa2e 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000272:	f000 fb59 	bl	8000928 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000276:	f000 fcb4 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 800027a:	2301      	movs	r3, #1
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	2340      	movs	r3, #64	@ 0x40
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2380      	movs	r3, #128	@ 0x80
 8000284:	4a3b      	ldr	r2, [pc, #236]	@ (8000374 <main+0x228>)
 8000286:	2100      	movs	r1, #0
 8000288:	2000      	movs	r0, #0
 800028a:	f000 fa20 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800028e:	f000 fb4b 	bl	8000928 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000292:	f000 fca6 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 8000296:	2301      	movs	r3, #1
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	2340      	movs	r3, #64	@ 0x40
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	4a35      	ldr	r2, [pc, #212]	@ (8000378 <main+0x22c>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fa12 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002aa:	f000 fb3d 	bl	8000928 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80002ae:	f000 fc98 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 80002b2:	2301      	movs	r3, #1
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	2340      	movs	r3, #64	@ 0x40
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	4a2f      	ldr	r2, [pc, #188]	@ (800037c <main+0x230>)
 80002be:	2100      	movs	r1, #0
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 fa04 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002c6:	f000 fb2f 	bl	8000928 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80002ca:	f000 fc8a 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 80002ce:	2301      	movs	r3, #1
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2340      	movs	r3, #64	@ 0x40
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2380      	movs	r3, #128	@ 0x80
 80002d8:	4a29      	ldr	r2, [pc, #164]	@ (8000380 <main+0x234>)
 80002da:	2100      	movs	r1, #0
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 f9f6 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002e2:	f000 fb21 	bl	8000928 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 80002e6:	f000 fc7c 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 80002ea:	2301      	movs	r3, #1
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2340      	movs	r3, #64	@ 0x40
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2380      	movs	r3, #128	@ 0x80
 80002f4:	4a23      	ldr	r2, [pc, #140]	@ (8000384 <main+0x238>)
 80002f6:	2100      	movs	r1, #0
 80002f8:	2000      	movs	r0, #0
 80002fa:	f000 f9e8 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002fe:	f000 fb13 	bl	8000928 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000302:	f000 fc6e 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 8000306:	2301      	movs	r3, #1
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	2340      	movs	r3, #64	@ 0x40
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2380      	movs	r3, #128	@ 0x80
 8000310:	4a1d      	ldr	r2, [pc, #116]	@ (8000388 <main+0x23c>)
 8000312:	2100      	movs	r1, #0
 8000314:	2000      	movs	r0, #0
 8000316:	f000 f9da 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800031a:	f000 fb05 	bl	8000928 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 800031e:	f000 fc60 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 8000322:	2301      	movs	r3, #1
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2340      	movs	r3, #64	@ 0x40
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2380      	movs	r3, #128	@ 0x80
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <main+0x240>)
 800032e:	2100      	movs	r1, #0
 8000330:	2000      	movs	r0, #0
 8000332:	f000 f9cc 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000336:	f000 faf7 	bl	8000928 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 800033a:	f000 fc52 	bl	8000be2 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 800033e:	2301      	movs	r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2340      	movs	r3, #64	@ 0x40
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2380      	movs	r3, #128	@ 0x80
 8000348:	4a11      	ldr	r2, [pc, #68]	@ (8000390 <main+0x244>)
 800034a:	2100      	movs	r1, #0
 800034c:	2000      	movs	r0, #0
 800034e:	f000 f9be 	bl	80006ce <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000352:	f000 fae9 	bl	8000928 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8000356:	bf00      	nop
 8000358:	e771      	b.n	800023e <main+0xf2>
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	08002890 	.word	0x08002890
 8000364:	08002898 	.word	0x08002898
 8000368:	08003600 	.word	0x08003600
 800036c:	08003a00 	.word	0x08003a00
 8000370:	08003e00 	.word	0x08003e00
 8000374:	08004200 	.word	0x08004200
 8000378:	08004600 	.word	0x08004600
 800037c:	08004a00 	.word	0x08004a00
 8000380:	08004e00 	.word	0x08004e00
 8000384:	08005200 	.word	0x08005200
 8000388:	08005600 	.word	0x08005600
 800038c:	08005a00 	.word	0x08005a00
 8000390:	08005e00 	.word	0x08005e00

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b090      	sub	sp, #64	@ 0x40
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2228      	movs	r2, #40	@ 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fa3c 	bl	8002820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003be:	2310      	movs	r3, #16
 80003c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fe2c 	bl	8002028 <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003d6:	f000 f869 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 f89a 	bl	800252c <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f855 	bl	80004ac <Error_Handler>
  }
}
 8000402:	bf00      	nop
 8000404:	3740      	adds	r7, #64	@ 0x40
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <MX_I2C2_Init+0x50>)
 8000412:	4a13      	ldr	r2, [pc, #76]	@ (8000460 <MX_I2C2_Init+0x54>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000416:	4b11      	ldr	r3, [pc, #68]	@ (800045c <MX_I2C2_Init+0x50>)
 8000418:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <MX_I2C2_Init+0x58>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_I2C2_Init+0x50>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <MX_I2C2_Init+0x50>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <MX_I2C2_Init+0x50>)
 800042a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800042e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <MX_I2C2_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <MX_I2C2_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043c:	4b07      	ldr	r3, [pc, #28]	@ (800045c <MX_I2C2_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <MX_I2C2_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000448:	4804      	ldr	r0, [pc, #16]	@ (800045c <MX_I2C2_Init+0x50>)
 800044a:	f001 f823 	bl	8001494 <HAL_I2C_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000454:	f000 f82a 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000030 	.word	0x20000030
 8000460:	40005800 	.word	0x40005800
 8000464:	00061a80 	.word	0x00061a80

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <MX_GPIO_Init+0x40>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <MX_GPIO_Init+0x40>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_GPIO_Init+0x40>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <MX_GPIO_Init+0x40>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a07      	ldr	r2, [pc, #28]	@ (80004a8 <MX_GPIO_Init+0x40>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <MX_GPIO_Init+0x40>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <Error_Handler+0x8>

080004b8 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	460a      	mov	r2, r1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80004c8:	2226      	movs	r2, #38	@ 0x26
 80004ca:	2100      	movs	r1, #0
 80004cc:	2078      	movs	r0, #120	@ 0x78
 80004ce:	f000 fc0b 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2078      	movs	r0, #120	@ 0x78
 80004d8:	f000 fc06 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	461a      	mov	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	@ 0x78
 80004e4:	f000 fc00 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	@ 0x78
 80004ee:	f000 fbfb 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	461a      	mov	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	2078      	movs	r0, #120	@ 0x78
 80004fa:	f000 fbf5 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2078      	movs	r0, #120	@ 0x78
 8000504:	f000 fbf0 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000508:	22ff      	movs	r2, #255	@ 0xff
 800050a:	2100      	movs	r1, #0
 800050c:	2078      	movs	r0, #120	@ 0x78
 800050e:	f000 fbeb 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000512:	222f      	movs	r2, #47	@ 0x2f
 8000514:	2100      	movs	r1, #0
 8000516:	2078      	movs	r0, #120	@ 0x78
 8000518:	f000 fbe6 	bl	8000ce8 <ssd1306_I2C_Write>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000534:	2227      	movs	r2, #39	@ 0x27
 8000536:	2100      	movs	r1, #0
 8000538:	2078      	movs	r0, #120	@ 0x78
 800053a:	f000 fbd5 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2078      	movs	r0, #120	@ 0x78
 8000544:	f000 fbd0 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	2078      	movs	r0, #120	@ 0x78
 8000550:	f000 fbca 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2078      	movs	r0, #120	@ 0x78
 800055a:	f000 fbc5 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	461a      	mov	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	2078      	movs	r0, #120	@ 0x78
 8000566:	f000 fbbf 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2078      	movs	r0, #120	@ 0x78
 8000570:	f000 fbba 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000574:	22ff      	movs	r2, #255	@ 0xff
 8000576:	2100      	movs	r1, #0
 8000578:	2078      	movs	r0, #120	@ 0x78
 800057a:	f000 fbb5 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800057e:	222f      	movs	r2, #47	@ 0x2f
 8000580:	2100      	movs	r1, #0
 8000582:	2078      	movs	r0, #120	@ 0x78
 8000584:	f000 fbb0 	bl	8000ce8 <ssd1306_I2C_Write>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80005a0:	22a3      	movs	r2, #163	@ 0xa3
 80005a2:	2100      	movs	r1, #0
 80005a4:	2078      	movs	r0, #120	@ 0x78
 80005a6:	f000 fb9f 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2078      	movs	r0, #120	@ 0x78
 80005b0:	f000 fb9a 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80005b4:	2240      	movs	r2, #64	@ 0x40
 80005b6:	2100      	movs	r1, #0
 80005b8:	2078      	movs	r0, #120	@ 0x78
 80005ba:	f000 fb95 	bl	8000ce8 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 80005be:	2229      	movs	r2, #41	@ 0x29
 80005c0:	2100      	movs	r1, #0
 80005c2:	2078      	movs	r0, #120	@ 0x78
 80005c4:	f000 fb90 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2078      	movs	r0, #120	@ 0x78
 80005ce:	f000 fb8b 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	461a      	mov	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	@ 0x78
 80005da:	f000 fb85 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	@ 0x78
 80005e4:	f000 fb80 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	@ 0x78
 80005f0:	f000 fb7a 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	@ 0x78
 80005fa:	f000 fb75 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 80005fe:	222f      	movs	r2, #47	@ 0x2f
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fb70 	bl	8000ce8 <ssd1306_I2C_Write>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000620:	22a3      	movs	r2, #163	@ 0xa3
 8000622:	2100      	movs	r1, #0
 8000624:	2078      	movs	r0, #120	@ 0x78
 8000626:	f000 fb5f 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2078      	movs	r0, #120	@ 0x78
 8000630:	f000 fb5a 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000634:	2240      	movs	r2, #64	@ 0x40
 8000636:	2100      	movs	r1, #0
 8000638:	2078      	movs	r0, #120	@ 0x78
 800063a:	f000 fb55 	bl	8000ce8 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 800063e:	222a      	movs	r2, #42	@ 0x2a
 8000640:	2100      	movs	r1, #0
 8000642:	2078      	movs	r0, #120	@ 0x78
 8000644:	f000 fb50 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2078      	movs	r0, #120	@ 0x78
 800064e:	f000 fb4b 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	461a      	mov	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	2078      	movs	r0, #120	@ 0x78
 800065a:	f000 fb45 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	2078      	movs	r0, #120	@ 0x78
 8000664:	f000 fb40 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	461a      	mov	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	2078      	movs	r0, #120	@ 0x78
 8000670:	f000 fb3a 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8000674:	2201      	movs	r2, #1
 8000676:	2100      	movs	r1, #0
 8000678:	2078      	movs	r0, #120	@ 0x78
 800067a:	f000 fb35 	bl	8000ce8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 800067e:	222f      	movs	r2, #47	@ 0x2f
 8000680:	2100      	movs	r1, #0
 8000682:	2078      	movs	r0, #120	@ 0x78
 8000684:	f000 fb30 	bl	8000ce8 <ssd1306_I2C_Write>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000694:	222e      	movs	r2, #46	@ 0x2e
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 fb25 	bl	8000ce8 <ssd1306_I2C_Write>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <SSD1306_InvertDisplay+0x1a>
 80006b0:	22a7      	movs	r2, #167	@ 0xa7
 80006b2:	2100      	movs	r1, #0
 80006b4:	2078      	movs	r0, #120	@ 0x78
 80006b6:	f000 fb17 	bl	8000ce8 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80006ba:	e004      	b.n	80006c6 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80006bc:	22a6      	movs	r2, #166	@ 0xa6
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	@ 0x78
 80006c2:	f000 fb11 	bl	8000ce8 <ssd1306_I2C_Write>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4603      	mov	r3, r0
 80006da:	81fb      	strh	r3, [r7, #14]
 80006dc:	460b      	mov	r3, r1
 80006de:	81bb      	strh	r3, [r7, #12]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80006e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e8:	3307      	adds	r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da00      	bge.n	80006f0 <SSD1306_DrawBitmap+0x22>
 80006ee:	3307      	adds	r3, #7
 80006f0:	10db      	asrs	r3, r3, #3
 80006f2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	82bb      	strh	r3, [r7, #20]
 80006fc:	e044      	b.n	8000788 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	827b      	strh	r3, [r7, #18]
 8000702:	e02f      	b.n	8000764 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000704:	8a7b      	ldrh	r3, [r7, #18]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	75fb      	strb	r3, [r7, #23]
 8000714:	e012      	b.n	800073c <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000716:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800071a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800071e:	fb03 f202 	mul.w	r2, r3, r2
 8000722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da00      	bge.n	800072c <SSD1306_DrawBitmap+0x5e>
 800072a:	3307      	adds	r3, #7
 800072c:	10db      	asrs	r3, r3, #3
 800072e:	b21b      	sxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	461a      	mov	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800073c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000740:	2b00      	cmp	r3, #0
 8000742:	da09      	bge.n	8000758 <SSD1306_DrawBitmap+0x8a>
 8000744:	89fa      	ldrh	r2, [r7, #14]
 8000746:	8a7b      	ldrh	r3, [r7, #18]
 8000748:	4413      	add	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	89b9      	ldrh	r1, [r7, #12]
 800074e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f92e 	bl	80009b4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800075c:	b29b      	uxth	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b29b      	uxth	r3, r3
 8000762:	827b      	strh	r3, [r7, #18]
 8000764:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbc9      	blt.n	8000704 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000770:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000774:	b29b      	uxth	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	b29b      	uxth	r3, r3
 800077a:	82bb      	strh	r3, [r7, #20]
 800077c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000780:	b29b      	uxth	r3, r3
 8000782:	3301      	adds	r3, #1
 8000784:	b29b      	uxth	r3, r3
 8000786:	81bb      	strh	r3, [r7, #12]
 8000788:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800078c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbb4      	blt.n	80006fe <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80007a6:	f000 fa25 	bl	8000bf4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80007aa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80007ae:	2201      	movs	r2, #1
 80007b0:	2178      	movs	r1, #120	@ 0x78
 80007b2:	485b      	ldr	r0, [pc, #364]	@ (8000920 <SSD1306_Init+0x180>)
 80007b4:	f001 f8b0 	bl	8001918 <HAL_I2C_IsDeviceReady>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	e0a9      	b.n	8000916 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80007c2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80007c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007c8:	e002      	b.n	80007d0 <SSD1306_Init+0x30>
		p--;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f9      	bne.n	80007ca <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80007d6:	22ae      	movs	r2, #174	@ 0xae
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	@ 0x78
 80007dc:	f000 fa84 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	@ 0x78
 80007e6:	f000 fa7f 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007ea:	2210      	movs	r2, #16
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	@ 0x78
 80007f0:	f000 fa7a 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007f4:	22b0      	movs	r2, #176	@ 0xb0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2078      	movs	r0, #120	@ 0x78
 80007fa:	f000 fa75 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80007fe:	22c8      	movs	r2, #200	@ 0xc8
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	@ 0x78
 8000804:	f000 fa70 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2078      	movs	r0, #120	@ 0x78
 800080e:	f000 fa6b 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000812:	2210      	movs	r2, #16
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	@ 0x78
 8000818:	f000 fa66 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800081c:	2240      	movs	r2, #64	@ 0x40
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	@ 0x78
 8000822:	f000 fa61 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000826:	2281      	movs	r2, #129	@ 0x81
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	@ 0x78
 800082c:	f000 fa5c 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000830:	22ff      	movs	r2, #255	@ 0xff
 8000832:	2100      	movs	r1, #0
 8000834:	2078      	movs	r0, #120	@ 0x78
 8000836:	f000 fa57 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800083a:	22a1      	movs	r2, #161	@ 0xa1
 800083c:	2100      	movs	r1, #0
 800083e:	2078      	movs	r0, #120	@ 0x78
 8000840:	f000 fa52 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000844:	22a6      	movs	r2, #166	@ 0xa6
 8000846:	2100      	movs	r1, #0
 8000848:	2078      	movs	r0, #120	@ 0x78
 800084a:	f000 fa4d 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800084e:	22a8      	movs	r2, #168	@ 0xa8
 8000850:	2100      	movs	r1, #0
 8000852:	2078      	movs	r0, #120	@ 0x78
 8000854:	f000 fa48 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000858:	223f      	movs	r2, #63	@ 0x3f
 800085a:	2100      	movs	r1, #0
 800085c:	2078      	movs	r0, #120	@ 0x78
 800085e:	f000 fa43 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000862:	22a4      	movs	r2, #164	@ 0xa4
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	@ 0x78
 8000868:	f000 fa3e 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800086c:	22d3      	movs	r2, #211	@ 0xd3
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	@ 0x78
 8000872:	f000 fa39 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	@ 0x78
 800087c:	f000 fa34 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000880:	22d5      	movs	r2, #213	@ 0xd5
 8000882:	2100      	movs	r1, #0
 8000884:	2078      	movs	r0, #120	@ 0x78
 8000886:	f000 fa2f 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800088a:	22f0      	movs	r2, #240	@ 0xf0
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	@ 0x78
 8000890:	f000 fa2a 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000894:	22d9      	movs	r2, #217	@ 0xd9
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	@ 0x78
 800089a:	f000 fa25 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800089e:	2222      	movs	r2, #34	@ 0x22
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	@ 0x78
 80008a4:	f000 fa20 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80008a8:	22da      	movs	r2, #218	@ 0xda
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	@ 0x78
 80008ae:	f000 fa1b 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80008b2:	2212      	movs	r2, #18
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	@ 0x78
 80008b8:	f000 fa16 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80008bc:	22db      	movs	r2, #219	@ 0xdb
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	@ 0x78
 80008c2:	f000 fa11 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80008c6:	2220      	movs	r2, #32
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	@ 0x78
 80008cc:	f000 fa0c 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80008d0:	228d      	movs	r2, #141	@ 0x8d
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	@ 0x78
 80008d6:	f000 fa07 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80008da:	2214      	movs	r2, #20
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	@ 0x78
 80008e0:	f000 fa02 	bl	8000ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008e4:	22af      	movs	r2, #175	@ 0xaf
 80008e6:	2100      	movs	r1, #0
 80008e8:	2078      	movs	r0, #120	@ 0x78
 80008ea:	f000 f9fd 	bl	8000ce8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008ee:	222e      	movs	r2, #46	@ 0x2e
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	@ 0x78
 80008f4:	f000 f9f8 	bl	8000ce8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f843 	bl	8000984 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80008fe:	f000 f813 	bl	8000928 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <SSD1306_Init+0x184>)
 8000904:	2200      	movs	r2, #0
 8000906:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SSD1306_Init+0x184>)
 800090a:	2200      	movs	r2, #0
 800090c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <SSD1306_Init+0x184>)
 8000910:	2201      	movs	r2, #1
 8000912:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000914:	2301      	movs	r3, #1
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000030 	.word	0x20000030
 8000924:	20000484 	.word	0x20000484

08000928 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e01d      	b.n	8000970 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	3b50      	subs	r3, #80	@ 0x50
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	@ 0x78
 8000940:	f000 f9d2 	bl	8000ce8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2078      	movs	r0, #120	@ 0x78
 800094a:	f000 f9cd 	bl	8000ce8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800094e:	2210      	movs	r2, #16
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	@ 0x78
 8000954:	f000 f9c8 	bl	8000ce8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	01db      	lsls	r3, r3, #7
 800095c:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <SSD1306_UpdateScreen+0x58>)
 800095e:	441a      	add	r2, r3
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	2140      	movs	r1, #64	@ 0x40
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 f959 	bl	8000c1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	3301      	adds	r3, #1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b07      	cmp	r3, #7
 8000974:	d9de      	bls.n	8000934 <SSD1306_UpdateScreen+0xc>
	}
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000084 	.word	0x20000084

08000984 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <SSD1306_Fill+0x14>
 8000994:	2300      	movs	r3, #0
 8000996:	e000      	b.n	800099a <SSD1306_Fill+0x16>
 8000998:	23ff      	movs	r3, #255	@ 0xff
 800099a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099e:	4619      	mov	r1, r3
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <SSD1306_Fill+0x2c>)
 80009a2:	f001 ff3d 	bl	8002820 <memset>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000084 	.word	0x20000084

080009b4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	70fb      	strb	r3, [r7, #3]
	if (
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ca:	d848      	bhi.n	8000a5e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80009d0:	d845      	bhi.n	8000a5e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SSD1306_DrawPixel+0xb4>)
 80009d4:	791b      	ldrb	r3, [r3, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf0c      	ite	eq
 80009e0:	2301      	moveq	r3, #1
 80009e2:	2300      	movne	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d11a      	bne.n	8000a24 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009ee:	88fa      	ldrh	r2, [r7, #6]
 80009f0:	88bb      	ldrh	r3, [r7, #4]
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	b298      	uxth	r0, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	01db      	lsls	r3, r3, #7
 80009fa:	4413      	add	r3, r2
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <SSD1306_DrawPixel+0xb8>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	b25a      	sxtb	r2, r3
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	2101      	movs	r1, #1
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b259      	sxtb	r1, r3
 8000a14:	88fa      	ldrh	r2, [r7, #6]
 8000a16:	4603      	mov	r3, r0
 8000a18:	01db      	lsls	r3, r3, #7
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2c9      	uxtb	r1, r1
 8000a1e:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <SSD1306_DrawPixel+0xb8>)
 8000a20:	54d1      	strb	r1, [r2, r3]
 8000a22:	e01d      	b.n	8000a60 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a24:	88fa      	ldrh	r2, [r7, #6]
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	b298      	uxth	r0, r3
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	01db      	lsls	r3, r3, #7
 8000a30:	4413      	add	r3, r2
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <SSD1306_DrawPixel+0xb8>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	b25a      	sxtb	r2, r3
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	2101      	movs	r1, #1
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	b259      	sxtb	r1, r3
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	4603      	mov	r3, r0
 8000a52:	01db      	lsls	r3, r3, #7
 8000a54:	4413      	add	r3, r2
 8000a56:	b2c9      	uxtb	r1, r1
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <SSD1306_DrawPixel+0xb8>)
 8000a5a:	54d1      	strb	r1, [r2, r3]
 8000a5c:	e000      	b.n	8000a60 <SSD1306_DrawPixel+0xac>
		return;
 8000a5e:	bf00      	nop
	}
}
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000484 	.word	0x20000484
 8000a6c:	20000084 	.word	0x20000084

08000a70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	80fb      	strh	r3, [r7, #6]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a80:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SSD1306_GotoXY+0x28>)
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a86:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <SSD1306_GotoXY+0x28>)
 8000a88:	88bb      	ldrh	r3, [r7, #4]
 8000a8a:	8053      	strh	r3, [r2, #2]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000484 	.word	0x20000484

08000a9c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000aac:	4b39      	ldr	r3, [pc, #228]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
	if (
 8000ab8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aba:	dc07      	bgt.n	8000acc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000abc:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000abe:	885b      	ldrh	r3, [r3, #2]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ac8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aca:	dd01      	ble.n	8000ad0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e05d      	b.n	8000b8c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e04b      	b.n	8000b6e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	3b20      	subs	r3, #32
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	7849      	ldrb	r1, [r1, #1]
 8000ae2:	fb01 f303 	mul.w	r3, r1, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	440b      	add	r3, r1
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	e030      	b.n	8000b5c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d010      	beq.n	8000b2c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	b298      	uxth	r0, r3
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000b18:	885a      	ldrh	r2, [r3, #2]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	79ba      	ldrb	r2, [r7, #6]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff ff45 	bl	80009b4 <SSD1306_DrawPixel>
 8000b2a:	e014      	b.n	8000b56 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000b2e:	881a      	ldrh	r2, [r3, #0]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	b298      	uxth	r0, r3
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000b3a:	885a      	ldrh	r2, [r3, #2]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4413      	add	r3, r2
 8000b42:	b299      	uxth	r1, r3
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf0c      	ite	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	2300      	movne	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	f7ff ff2f 	bl	80009b4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d3c8      	bcc.n	8000afa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	461a      	mov	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d3ad      	bcc.n	8000ad6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <SSD1306_Putc+0xf8>)
 8000b88:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000484 	.word	0x20000484

08000b98 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ba6:	e012      	b.n	8000bce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff73 	bl	8000a9c <SSD1306_Putc>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d002      	beq.n	8000bc8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	e008      	b.n	8000bda <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1e8      	bne.n	8000ba8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fecc 	bl	8000984 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000bec:	f7ff fe9c 	bl	8000928 <SSD1306_UpdateScreen>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <ssd1306_I2C_Init+0x24>)
 8000bfc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bfe:	e002      	b.n	8000c06 <ssd1306_I2C_Init+0x12>
		p--;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f9      	bne.n	8000c00 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	0003d090 	.word	0x0003d090

08000c1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b0c7      	sub	sp, #284	@ 0x11c
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	4604      	mov	r4, r0
 8000c24:	4608      	mov	r0, r1
 8000c26:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000c2a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000c2e:	600a      	str	r2, [r1, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c36:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c42:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000c46:	4602      	mov	r2, r0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c52:	460a      	mov	r2, r1
 8000c54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c62:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c70:	e015      	b.n	8000c9e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000c72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c7a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	441a      	add	r2, r3
 8000c82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c86:	3301      	adds	r3, #1
 8000c88:	7811      	ldrb	r1, [r2, #0]
 8000c8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c94:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ca8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d8df      	bhi.n	8000c72 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8000cb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cb6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	9000      	str	r0, [sp, #0]
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000cd6:	f000 fd21 	bl	800171c <HAL_I2C_Master_Transmit>
}
 8000cda:	bf00      	nop
 8000cdc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	20000030 	.word	0x20000030

08000ce8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	71bb      	strb	r3, [r7, #6]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000cfe:	797b      	ldrb	r3, [r7, #5]
 8000d00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	b299      	uxth	r1, r3
 8000d06:	f107 020c 	add.w	r2, r7, #12
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <ssd1306_I2C_Write+0x38>)
 8000d12:	f000 fd03 	bl	800171c <HAL_I2C_Master_Transmit>
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000030 	.word	0x20000030

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a16      	ldr	r2, [pc, #88]	@ (8000dfc <HAL_I2C_MspInit+0x74>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d124      	bne.n	8000df2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_I2C_MspInit+0x78>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <HAL_I2C_MspInit+0x78>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_I2C_MspInit+0x78>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <HAL_I2C_MspInit+0x7c>)
 8000dd6:	f000 f9d9 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_I2C_MspInit+0x78>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0x78>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_I2C_MspInit+0x78>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40005800 	.word	0x40005800
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f874 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff fff8 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f001 fccb 	bl	8002830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff f957 	bl	800014c <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ea8:	08006234 	.word	0x08006234
  ldr r2, =_sbss
 8000eac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000eb0:	20000490 	.word	0x20000490

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f92b 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff ff26 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f935 	bl	8001172 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f90b 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	2000000c 	.word	0x2000000c

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000010 	.word	0x20000010
 8000f64:	2000048c 	.word	0x2000048c

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	2000048c 	.word	0x2000048c

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff0 	bl	8000f68 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffe0 	bl	8000f68 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000010 	.word	0x20000010

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	@ (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	@ (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	@ 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff90 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff49 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff5e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff90 	bl	800107c <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5f 	bl	8001028 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffb0 	bl	80010e0 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b08b      	sub	sp, #44	@ 0x2c
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e169      	b.n	8001474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a0:	2201      	movs	r2, #1
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8158 	bne.w	800146e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a9a      	ldr	r2, [pc, #616]	@ (800142c <HAL_GPIO_Init+0x2a0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d05e      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011c8:	4a98      	ldr	r2, [pc, #608]	@ (800142c <HAL_GPIO_Init+0x2a0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d875      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011ce:	4a98      	ldr	r2, [pc, #608]	@ (8001430 <HAL_GPIO_Init+0x2a4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d058      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011d4:	4a96      	ldr	r2, [pc, #600]	@ (8001430 <HAL_GPIO_Init+0x2a4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d86f      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011da:	4a96      	ldr	r2, [pc, #600]	@ (8001434 <HAL_GPIO_Init+0x2a8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d052      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011e0:	4a94      	ldr	r2, [pc, #592]	@ (8001434 <HAL_GPIO_Init+0x2a8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d869      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011e6:	4a94      	ldr	r2, [pc, #592]	@ (8001438 <HAL_GPIO_Init+0x2ac>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d04c      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011ec:	4a92      	ldr	r2, [pc, #584]	@ (8001438 <HAL_GPIO_Init+0x2ac>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d863      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011f2:	4a92      	ldr	r2, [pc, #584]	@ (800143c <HAL_GPIO_Init+0x2b0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d046      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011f8:	4a90      	ldr	r2, [pc, #576]	@ (800143c <HAL_GPIO_Init+0x2b0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d85d      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d82a      	bhi.n	8001258 <HAL_GPIO_Init+0xcc>
 8001202:	2b12      	cmp	r3, #18
 8001204:	d859      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 8001206:	a201      	add	r2, pc, #4	@ (adr r2, 800120c <HAL_GPIO_Init+0x80>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001287 	.word	0x08001287
 8001210:	08001261 	.word	0x08001261
 8001214:	08001273 	.word	0x08001273
 8001218:	080012b5 	.word	0x080012b5
 800121c:	080012bb 	.word	0x080012bb
 8001220:	080012bb 	.word	0x080012bb
 8001224:	080012bb 	.word	0x080012bb
 8001228:	080012bb 	.word	0x080012bb
 800122c:	080012bb 	.word	0x080012bb
 8001230:	080012bb 	.word	0x080012bb
 8001234:	080012bb 	.word	0x080012bb
 8001238:	080012bb 	.word	0x080012bb
 800123c:	080012bb 	.word	0x080012bb
 8001240:	080012bb 	.word	0x080012bb
 8001244:	080012bb 	.word	0x080012bb
 8001248:	080012bb 	.word	0x080012bb
 800124c:	080012bb 	.word	0x080012bb
 8001250:	08001269 	.word	0x08001269
 8001254:	0800127d 	.word	0x0800127d
 8001258:	4a79      	ldr	r2, [pc, #484]	@ (8001440 <HAL_GPIO_Init+0x2b4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800125e:	e02c      	b.n	80012ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e029      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	3304      	adds	r3, #4
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e024      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	3308      	adds	r3, #8
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e01f      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	330c      	adds	r3, #12
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e01a      	b.n	80012bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128e:	2304      	movs	r3, #4
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e013      	b.n	80012bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d105      	bne.n	80012a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	611a      	str	r2, [r3, #16]
          break;
 80012a6:	e009      	b.n	80012bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	615a      	str	r2, [r3, #20]
          break;
 80012b2:	e003      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x130>
          break;
 80012ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2bff      	cmp	r3, #255	@ 0xff
 80012c0:	d801      	bhi.n	80012c6 <HAL_GPIO_Init+0x13a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	e001      	b.n	80012ca <HAL_GPIO_Init+0x13e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2bff      	cmp	r3, #255	@ 0xff
 80012d0:	d802      	bhi.n	80012d8 <HAL_GPIO_Init+0x14c>
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	e002      	b.n	80012de <HAL_GPIO_Init+0x152>
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	3b08      	subs	r3, #8
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	210f      	movs	r1, #15
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	6a39      	ldr	r1, [r7, #32]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80b1 	beq.w	800146e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800130c:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <HAL_GPIO_Init+0x2b8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x2b8>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <HAL_GPIO_Init+0x2b8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001324:	4a48      	ldr	r2, [pc, #288]	@ (8001448 <HAL_GPIO_Init+0x2bc>)
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a40      	ldr	r2, [pc, #256]	@ (800144c <HAL_GPIO_Init+0x2c0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d013      	beq.n	8001378 <HAL_GPIO_Init+0x1ec>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a3f      	ldr	r2, [pc, #252]	@ (8001450 <HAL_GPIO_Init+0x2c4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00d      	beq.n	8001374 <HAL_GPIO_Init+0x1e8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3e      	ldr	r2, [pc, #248]	@ (8001454 <HAL_GPIO_Init+0x2c8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x1e4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3d      	ldr	r2, [pc, #244]	@ (8001458 <HAL_GPIO_Init+0x2cc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_GPIO_Init+0x1e0>
 8001368:	2303      	movs	r3, #3
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 800136c:	2304      	movs	r3, #4
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001378:	2300      	movs	r3, #0
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138a:	492f      	ldr	r1, [pc, #188]	@ (8001448 <HAL_GPIO_Init+0x2bc>)
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a4:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	492c      	ldr	r1, [pc, #176]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4928      	ldr	r1, [pc, #160]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	4922      	ldr	r1, [pc, #136]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60cb      	str	r3, [r1, #12]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	491e      	ldr	r1, [pc, #120]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4918      	ldr	r1, [pc, #96]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	4914      	ldr	r1, [pc, #80]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 800140c:	4013      	ands	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d021      	beq.n	8001460 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	490e      	ldr	r1, [pc, #56]	@ (800145c <HAL_GPIO_Init+0x2d0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]
 8001428:	e021      	b.n	800146e <HAL_GPIO_Init+0x2e2>
 800142a:	bf00      	nop
 800142c:	10320000 	.word	0x10320000
 8001430:	10310000 	.word	0x10310000
 8001434:	10220000 	.word	0x10220000
 8001438:	10210000 	.word	0x10210000
 800143c:	10120000 	.word	0x10120000
 8001440:	10110000 	.word	0x10110000
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	40010800 	.word	0x40010800
 8001450:	40010c00 	.word	0x40010c00
 8001454:	40011000 	.word	0x40011000
 8001458:	40011400 	.word	0x40011400
 800145c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	43db      	mvns	r3, r3
 8001468:	4909      	ldr	r1, [pc, #36]	@ (8001490 <HAL_GPIO_Init+0x304>)
 800146a:	4013      	ands	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	3301      	adds	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f47f ae8e 	bne.w	80011a0 <HAL_GPIO_Init+0x14>
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	372c      	adds	r7, #44	@ 0x2c
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e12b      	b.n	80016fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fc64 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	@ 0x24
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f8:	f001 f960 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80014fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a81      	ldr	r2, [pc, #516]	@ (8001708 <HAL_I2C_Init+0x274>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d807      	bhi.n	8001518 <HAL_I2C_Init+0x84>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a80      	ldr	r2, [pc, #512]	@ (800170c <HAL_I2C_Init+0x278>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e006      	b.n	8001526 <HAL_I2C_Init+0x92>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a7d      	ldr	r2, [pc, #500]	@ (8001710 <HAL_I2C_Init+0x27c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	bf94      	ite	ls
 8001520:	2301      	movls	r3, #1
 8001522:	2300      	movhi	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0e7      	b.n	80016fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a78      	ldr	r2, [pc, #480]	@ (8001714 <HAL_I2C_Init+0x280>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a6a      	ldr	r2, [pc, #424]	@ (8001708 <HAL_I2C_Init+0x274>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d802      	bhi.n	8001568 <HAL_I2C_Init+0xd4>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3301      	adds	r3, #1
 8001566:	e009      	b.n	800157c <HAL_I2C_Init+0xe8>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a69      	ldr	r2, [pc, #420]	@ (8001718 <HAL_I2C_Init+0x284>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	3301      	adds	r3, #1
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800158e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	495c      	ldr	r1, [pc, #368]	@ (8001708 <HAL_I2C_Init+0x274>)
 8001598:	428b      	cmp	r3, r1
 800159a:	d819      	bhi.n	80015d0 <HAL_I2C_Init+0x13c>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e59      	subs	r1, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015b0:	400b      	ands	r3, r1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <HAL_I2C_Init+0x138>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1e59      	subs	r1, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	e051      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 80015cc:	2304      	movs	r3, #4
 80015ce:	e04f      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <HAL_I2C_Init+0x168>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1e58      	subs	r0, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e012      	b.n	8001622 <HAL_I2C_Init+0x18e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e58      	subs	r0, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	0099      	lsls	r1, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Init+0x196>
 8001626:	2301      	movs	r3, #1
 8001628:	e022      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <HAL_I2C_Init+0x1bc>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e58      	subs	r0, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	440b      	add	r3, r1
 8001640:	fbb0 f3f3 	udiv	r3, r0, r3
 8001644:	3301      	adds	r3, #1
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164e:	e00f      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1e58      	subs	r0, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	0099      	lsls	r1, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	6809      	ldr	r1, [r1, #0]
 8001674:	4313      	orrs	r3, r2
 8001676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800169e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6911      	ldr	r1, [r2, #16]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	4311      	orrs	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	000186a0 	.word	0x000186a0
 800170c:	001e847f 	.word	0x001e847f
 8001710:	003d08ff 	.word	0x003d08ff
 8001714:	431bde83 	.word	0x431bde83
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	461a      	mov	r2, r3
 8001728:	460b      	mov	r3, r1
 800172a:	817b      	strh	r3, [r7, #10]
 800172c:	4613      	mov	r3, r2
 800172e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff fc1a 	bl	8000f68 <HAL_GetTick>
 8001734:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b20      	cmp	r3, #32
 8001740:	f040 80e0 	bne.w	8001904 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2319      	movs	r3, #25
 800174a:	2201      	movs	r2, #1
 800174c:	4970      	ldr	r1, [pc, #448]	@ (8001910 <HAL_I2C_Master_Transmit+0x1f4>)
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fa92 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800175a:	2302      	movs	r3, #2
 800175c:	e0d3      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_I2C_Master_Transmit+0x50>
 8001768:	2302      	movs	r3, #2
 800176a:	e0cc      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1ea>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d007      	beq.n	8001792 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2221      	movs	r2, #33	@ 0x21
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2210      	movs	r2, #16
 80017ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	893a      	ldrh	r2, [r7, #8]
 80017c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a50      	ldr	r2, [pc, #320]	@ (8001914 <HAL_I2C_Master_Transmit+0x1f8>)
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6a3a      	ldr	r2, [r7, #32]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f9ca 	bl	8001b74 <I2C_MasterRequestWrite>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e08d      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001800:	e066      	b.n	80018d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	6a39      	ldr	r1, [r7, #32]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fb50 	bl	8001eac <I2C_WaitOnTXEFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00d      	beq.n	800182e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	2b04      	cmp	r3, #4
 8001818:	d107      	bne.n	800182a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06b      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b04      	cmp	r3, #4
 800186a:	d11b      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0x188>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d017      	beq.n	80018a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	6a39      	ldr	r1, [r7, #32]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fb47 	bl	8001f3c <I2C_WaitOnBTFFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d107      	bne.n	80018cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e01a      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d194      	bne.n	8001802 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	00100002 	.word	0x00100002
 8001914:	ffff0000 	.word	0xffff0000

08001918 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	460b      	mov	r3, r1
 8001926:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fb1e 	bl	8000f68 <HAL_GetTick>
 800192c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b20      	cmp	r3, #32
 800193c:	f040 8111 	bne.w	8001b62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2319      	movs	r3, #25
 8001946:	2201      	movs	r2, #1
 8001948:	4988      	ldr	r1, [pc, #544]	@ (8001b6c <HAL_I2C_IsDeviceReady+0x254>)
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f994 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	e104      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_I2C_IsDeviceReady+0x50>
 8001964:	2302      	movs	r3, #2
 8001966:	e0fd      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d007      	beq.n	800198e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800199c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2224      	movs	r2, #36	@ 0x24
 80019a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a70      	ldr	r2, [pc, #448]	@ (8001b70 <HAL_I2C_IsDeviceReady+0x258>)
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f952 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00d      	beq.n	80019f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019e8:	d103      	bne.n	80019f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0b6      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff faaf 	bl	8000f68 <HAL_GetTick>
 8001a0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	bf0c      	ite	eq
 8001a1a:	2301      	moveq	r3, #1
 8001a1c:	2300      	movne	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a30:	bf0c      	ite	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	2300      	movne	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a3a:	e025      	b.n	8001a88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a3c:	f7ff fa94 	bl	8000f68 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d302      	bcc.n	8001a52 <HAL_I2C_IsDeviceReady+0x13a>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	22a0      	movs	r2, #160	@ 0xa0
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a92:	d005      	beq.n	8001aa0 <HAL_I2C_IsDeviceReady+0x188>
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_I2C_IsDeviceReady+0x188>
 8001a9a:	7dbb      	ldrb	r3, [r7, #22]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0cd      	beq.n	8001a3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d129      	bne.n	8001b0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2319      	movs	r3, #25
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4921      	ldr	r1, [pc, #132]	@ (8001b6c <HAL_I2C_IsDeviceReady+0x254>)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f8c6 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e036      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e02c      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2319      	movs	r3, #25
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	490f      	ldr	r1, [pc, #60]	@ (8001b6c <HAL_I2C_IsDeviceReady+0x254>)
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f8a2 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e012      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f4ff af32 	bcc.w	80019b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
  }
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	00100002 	.word	0x00100002
 8001b70:	ffff0000 	.word	0xffff0000

08001b74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d006      	beq.n	8001b9e <I2C_MasterRequestWrite+0x2a>
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d003      	beq.n	8001b9e <I2C_MasterRequestWrite+0x2a>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b9c:	d108      	bne.n	8001bb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00b      	b.n	8001bc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	2b12      	cmp	r3, #18
 8001bb6:	d107      	bne.n	8001bc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f84f 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bee:	d103      	bne.n	8001bf8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e035      	b.n	8001c68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c04:	d108      	bne.n	8001c18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	e01b      	b.n	8001c50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c18:	897b      	ldrh	r3, [r7, #10]
 8001c1a:	11db      	asrs	r3, r3, #7
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 0306 	and.w	r3, r3, #6
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f063 030f 	orn	r3, r3, #15
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	490e      	ldr	r1, [pc, #56]	@ (8001c70 <I2C_MasterRequestWrite+0xfc>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f898 	bl	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e010      	b.n	8001c68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c46:	897b      	ldrh	r3, [r7, #10]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4907      	ldr	r1, [pc, #28]	@ (8001c74 <I2C_MasterRequestWrite+0x100>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f888 	bl	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	00010008 	.word	0x00010008
 8001c74:	00010002 	.word	0x00010002

08001c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c88:	e048      	b.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d044      	beq.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff f969 	bl	8000f68 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d139      	bne.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10d      	bne.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	e00c      	b.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d116      	bne.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f043 0220 	orr.w	r2, r3, #32
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e023      	b.n	8001d64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	0c1b      	lsrs	r3, r3, #16
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10d      	bne.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4013      	ands	r3, r2
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	e00c      	b.n	8001d5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d093      	beq.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d7a:	e071      	b.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d8a:	d123      	bne.n	8001dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0204 	orr.w	r2, r3, #4
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e067      	b.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d041      	beq.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ddc:	f7ff f8c4 	bl	8000f68 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d302      	bcc.n	8001df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d136      	bne.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10c      	bne.n	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4013      	ands	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	e00b      	b.n	8001e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e021      	b.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10c      	bne.n	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	43da      	mvns	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4013      	ands	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf14      	ite	ne
 8001e7c:	2301      	movne	r3, #1
 8001e7e:	2300      	moveq	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e00b      	b.n	8001e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f af6d 	bne.w	8001d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eb8:	e034      	b.n	8001f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f886 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e034      	b.n	8001f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d028      	beq.n	8001f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7ff f849 	bl	8000f68 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11d      	bne.n	8001f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef2:	2b80      	cmp	r3, #128	@ 0x80
 8001ef4:	d016      	beq.n	8001f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e007      	b.n	8001f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	2b80      	cmp	r3, #128	@ 0x80
 8001f30:	d1c3      	bne.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f48:	e034      	b.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f83e 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e034      	b.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d028      	beq.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f62:	f7ff f801 	bl	8000f68 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11d      	bne.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d016      	beq.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e007      	b.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d1c3      	bne.n	8001f4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe2:	d11b      	bne.n	800201c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e272      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8087 	beq.w	8002156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b92      	ldr	r3, [pc, #584]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002054:	4b8f      	ldr	r3, [pc, #572]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d112      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
 8002060:	4b8c      	ldr	r3, [pc, #560]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b89      	ldr	r3, [pc, #548]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06c      	beq.n	8002154 <HAL_RCC_OscConfig+0x12c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d168      	bne.n	8002154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e24c      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x76>
 8002090:	4b80      	ldr	r3, [pc, #512]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7f      	ldr	r2, [pc, #508]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7a      	ldr	r2, [pc, #488]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b78      	ldr	r3, [pc, #480]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xbc>
 80020ca:	4b72      	ldr	r3, [pc, #456]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a71      	ldr	r2, [pc, #452]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b68      	ldr	r3, [pc, #416]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a67      	ldr	r2, [pc, #412]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe ff30 	bl	8000f68 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7fe ff2c 	bl	8000f68 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	@ 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e200      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe4>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe ff1c 	bl	8000f68 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe ff18 	bl	8000f68 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1ec      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b53      	ldr	r3, [pc, #332]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x10c>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b4c      	ldr	r3, [pc, #304]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216e:	4b49      	ldr	r3, [pc, #292]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1c0      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4939      	ldr	r1, [pc, #228]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b36      	ldr	r3, [pc, #216]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fed1 	bl	8000f68 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7fe fecd 	bl	8000f68 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1a1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4927      	ldr	r1, [pc, #156]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe feb0 	bl	8000f68 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7fe feac 	bl	8000f68 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e180      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03a      	beq.n	80022ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe fe90 	bl	8000f68 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7fe fe8c 	bl	8000f68 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e160      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 faba 	bl	80027e4 <RCC_Delay>
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fe76 	bl	8000f68 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fe72 	bl	8000f68 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d908      	bls.n	80022a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e146      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	42420000 	.word	0x42420000
 800229c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b92      	ldr	r3, [pc, #584]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e9      	bne.n	8002280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a6 	beq.w	8002406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b8b      	ldr	r3, [pc, #556]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b88      	ldr	r3, [pc, #544]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a87      	ldr	r2, [pc, #540]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b85      	ldr	r3, [pc, #532]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b82      	ldr	r3, [pc, #520]	@ (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b7f      	ldr	r3, [pc, #508]	@ (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7e      	ldr	r2, [pc, #504]	@ (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fe33 	bl	8000f68 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7fe fe2f 	bl	8000f68 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	@ 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e103      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b75      	ldr	r3, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x4c8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x312>
 800232c:	4b6f      	ldr	r3, [pc, #444]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a6e      	ldr	r2, [pc, #440]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e02d      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x334>
 8002342:	4b6a      	ldr	r3, [pc, #424]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a69      	ldr	r2, [pc, #420]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b67      	ldr	r3, [pc, #412]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a66      	ldr	r2, [pc, #408]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x356>
 8002364:	4b61      	ldr	r3, [pc, #388]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a60      	ldr	r2, [pc, #384]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	4b5e      	ldr	r3, [pc, #376]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a5d      	ldr	r2, [pc, #372]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800237e:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a5a      	ldr	r2, [pc, #360]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b58      	ldr	r3, [pc, #352]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a57      	ldr	r2, [pc, #348]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe fde3 	bl	8000f68 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fddf 	bl	8000f68 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0b1      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x37e>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fdcd 	bl	8000f68 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe fdc9 	bl	8000f68 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e09b      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b40      	ldr	r3, [pc, #256]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d061      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d146      	bne.n	80024b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fd9d 	bl	8000f68 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fd99 	bl	8000f68 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e06d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4921      	ldr	r1, [pc, #132]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a19      	ldr	r1, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	430b      	orrs	r3, r1
 800247e:	491b      	ldr	r1, [pc, #108]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fd6d 	bl	8000f68 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fd69 	bl	8000f68 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e03d      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x46a>
 80024b0:	e035      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fd56 	bl	8000f68 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fd52 	bl	8000f68 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e026      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x498>
 80024de:	e01e      	b.n	800251e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e019      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x500>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4965      	ldr	r1, [pc, #404]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7fe fca4 	bl	8000f68 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fca0 	bl	8000f68 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	4922      	ldr	r1, [pc, #136]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_RCC_ClockConfig+0x1cc>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc02 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08006200 	.word	0x08006200
 80026f8:	20000008 	.word	0x20000008
 80026fc:	2000000c 	.word	0x2000000c

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x94>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d002      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x30>
 800272a:	2b08      	cmp	r3, #8
 800272c:	d003      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x36>
 800272e:	e027      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x98>)
 8002732:	613b      	str	r3, [r7, #16]
      break;
 8002734:	e027      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0c9b      	lsrs	r3, r3, #18
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	4a17      	ldr	r2, [pc, #92]	@ (800279c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002740:	5cd3      	ldrb	r3, [r2, r3]
 8002742:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x94>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0c5b      	lsrs	r3, r3, #17
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x98>)
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e004      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	613b      	str	r3, [r7, #16]
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x98>)
 8002782:	613b      	str	r3, [r7, #16]
      break;
 8002784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002786:	693b      	ldr	r3, [r7, #16]
}
 8002788:	4618      	mov	r0, r3
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200
 800279c:	08006218 	.word	0x08006218
 80027a0:	08006228 	.word	0x08006228
 80027a4:	003d0900 	.word	0x003d0900

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b02      	ldr	r3, [pc, #8]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000008 	.word	0x20000008

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c0:	f7ff fff2 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08006210 	.word	0x08006210

080027e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <RCC_Delay+0x34>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <RCC_Delay+0x38>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0a5b      	lsrs	r3, r3, #9
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002800:	bf00      	nop
  }
  while (Delay --);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1e5a      	subs	r2, r3, #1
 8002806:	60fa      	str	r2, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f9      	bne.n	8002800 <RCC_Delay+0x1c>
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	20000008 	.word	0x20000008
 800281c:	10624dd3 	.word	0x10624dd3

08002820 <memset>:
 8002820:	4603      	mov	r3, r0
 8002822:	4402      	add	r2, r0
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <memset+0xa>
 8002828:	4770      	bx	lr
 800282a:	f803 1b01 	strb.w	r1, [r3], #1
 800282e:	e7f9      	b.n	8002824 <memset+0x4>

08002830 <__libc_init_array>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	2600      	movs	r6, #0
 8002834:	4d0c      	ldr	r5, [pc, #48]	@ (8002868 <__libc_init_array+0x38>)
 8002836:	4c0d      	ldr	r4, [pc, #52]	@ (800286c <__libc_init_array+0x3c>)
 8002838:	1b64      	subs	r4, r4, r5
 800283a:	10a4      	asrs	r4, r4, #2
 800283c:	42a6      	cmp	r6, r4
 800283e:	d109      	bne.n	8002854 <__libc_init_array+0x24>
 8002840:	f000 f81a 	bl	8002878 <_init>
 8002844:	2600      	movs	r6, #0
 8002846:	4d0a      	ldr	r5, [pc, #40]	@ (8002870 <__libc_init_array+0x40>)
 8002848:	4c0a      	ldr	r4, [pc, #40]	@ (8002874 <__libc_init_array+0x44>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	42a6      	cmp	r6, r4
 8002850:	d105      	bne.n	800285e <__libc_init_array+0x2e>
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	f855 3b04 	ldr.w	r3, [r5], #4
 8002858:	4798      	blx	r3
 800285a:	3601      	adds	r6, #1
 800285c:	e7ee      	b.n	800283c <__libc_init_array+0xc>
 800285e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002862:	4798      	blx	r3
 8002864:	3601      	adds	r6, #1
 8002866:	e7f2      	b.n	800284e <__libc_init_array+0x1e>
 8002868:	0800622c 	.word	0x0800622c
 800286c:	0800622c 	.word	0x0800622c
 8002870:	0800622c 	.word	0x0800622c
 8002874:	08006230 	.word	0x08006230

08002878 <_init>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr

08002884 <_fini>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	bf00      	nop
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr
